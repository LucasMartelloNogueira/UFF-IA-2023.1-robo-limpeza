Lucas
* adaptar algoritmos de busca para evitar obstaculos (falta testar algoritmos):
- A*: ok
- branch and bound: ok
- best first: ok
- hill climb: ok
- profundidade: ok
- largura: ok

Valesca
* script python para gertar base de dados com: arestas e pesos, sujeira e obstaculos
    aresta(<peso>, v1, v2).
    sujeira(v1).
    obstaculo(v1).


Karina
* implementar distancia manhatan

* ver como fazer alterações na base de dados (sujeira e estados do robo / assert e retract)
ASSERT -> adiciona novo fato a base de dados.
Exemplo: assert(casado(joao, manu)).

RETRACT -> remove fato da base de dados.
Exemplo: retract(casado(joao, manu)).

OBS.: Importante inserir :- dynamic casado/2 (nome da relação/fato que irá ser dinâmico) antes do início do código, para assim permitir as alterações.


NOVAS TAREFAS

- fazer lógica de robo recolher todas as sujeiras e ir para o ponto final
  - robo olha todas as sujeiras e suas heuristicas (usando função de avaliação manhattan)
  - o robô escolhe a sujeira mais próxima (robô muda de estado a cada movimento), vai até ela e limpa a sujeira (vertice da sujeira muda de estado, ex: de "sujo" para "livre", tem que determinar isso ainda)
  - ao limpar a primeira sujeira, robo vai para a próxima sujeira mais próxima e assim por diante
  - ao limpar todas as sujeiras, o robô vai até a posição final e programa encerra


Opcional (seria bom para ajudar no 10)

- pesquisar formas de fazer input do terminal do prolog para arquivos
- criar script python para formatar arquivo de saída do prolog
- pensar em métricas de comparações em algoritmos (custo menor caminho encontrado, quantidade de nós visitados)
- criar gráficos (sugestão: python - matplotlib) para comparar métricas
- aprender a criar makefiles (para rodar todo o projeto - criar tabelas de métricas de algoritmos e arquivos png de gráficos)




------------------------------------------------------------------------------------------------



* duvidas:
- o robo sabe previamente onde estão as sujeiras? (findall na base de dados?)